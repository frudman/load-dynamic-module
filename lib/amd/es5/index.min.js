define(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),Object.defineProperty(exports,"__esModule",{value:!0}),exports.addKnownModule=w,exports.default=void 0;var r=require("tidbits");const o=[{t:(e,t)=>/^(https?[:])?[\/][\/]/i.test(e),r:(e,t)=>e},{t:(e,t)=>/^unpkg[@#]/i.test(e),r:(e,t)=>`https://unpkg.com/${i(e,/^unpkg[@#]/i,"")}`},{t:(e,t)=>/^cdnjs[@#]/i.test(e),r:(e,t)=>`https://cdnjs.cloudflare.com/ajax/libs/${i(e,/^cdnjs[@#]/i,"",...s)}`},{t:(e,t)=>/^jsdelive?r[@#]/i.test(e),r:(e,t)=>`https://cdn.jsdelivr.net/npm/${i(e,/^jsdelive?r[@#]/i,"",...s)}`},{t:(e,t)=>/jsdelivr.com/i.test(t||""),r:(e,t)=>new URL(e,t+"/").href},{t:(e,t)=>/^[a-z_$]/i.test(e),r:(e,t)=>`https://unpkg.com/${e}`},{t:(e,t)=>!0,r:(e,t)=>t?new URL(e,t).href:e}],s=[/([^\/]+)[@]/,"\\1/"],i=(e,...t)=>Array(t.length/2).reduce(e=>e.replace(t.shift(),t.shift()),e),l=[{t:e=>/css/i.test(e),c:e=>((0,r.loadCSSCode)(e),e)},{t:e=>/json/i.test(e),c:e=>JSON.parse(e)},{t:e=>!0,c:e=>e}],a=e=>e.replace(/\brequire\s*[(]/g,"await require("),d=e=>/module[.]exports/.test(e),c=e=>(e||"").split(".").pop(),u={},f=e=>u[e]||(u[e]=new g({id:e})),p=(e,t)=>u[e]=new g({id:e,module:t});class h extends Error{constructor(e,t){super(e),this.downloadError=t}}class y extends Error{constructor(e,...t){super(e),this.loadErrors=t}}const m=30;class g{constructor({id:e,module:t}={}){e&&(this.id=e),t&&(this.module=t)}get isLoaded(){return"module"in this}get isUnresolved(){return!this.isLoaded&&!!this.waitingOnMe}resolved(e){this.module=e,(this.waitingOnMe||[]).forEach(e=>e()),delete this.waitingOnMe}dependsOnMe(e){const t=this.waitingOnMe||(this.waitingOnMe=[]);t.push(e),t.length>m&&this.resolved(new Error(`likely cycle in module resolution for ${this.id} (depth=${t.length})`))}genAMDDefine(e){const t=this;r.amd={};var n=!1;function r(...r){n=!0;const o=r.pop();if("function"!=typeof o)throw new Error(`expecting 'define' to be a function (was ${typeof o})`);const s=o.length,i=[];for(;i.length<s;){const e=r.pop();if("string"==typeof e)i.unshift(e);else{if(!Array.isArray(e))throw new Error("invalid dependency in AMD module definition - can only be a string or an array of strings");for(;i.length<s&&e.length>0;){const t=e.pop();if("string"!=typeof t)throw new Error(`invalid dependency in AMD module definition - can only be a string (got type=${typeof t})`);i.unshift(t)}}}j(e,...i).then(async e=>{const n=Array.isArray(e)?e:[e],r=n.filter(e=>e instanceof Error);if(r.length>0)t.resolved(new y("AMD Define method NOT executed because of failed dependencies",...r));else try{t.resolved(await o(...n))}catch(e){t.resolved(new y("AMD Define method failed",e))}})}return{defineMethod:r,get isAMD(){return n}}}}function w(e,t,n=[]){const r=(n||[]).concat(o).find(t=>t.t(e)).r(e);p(name,new g({id:r,module:t}))}const v={baseUrl:window.location.href,globals:()=>{},urlResolvers:o,loaders:l},b=j.bind(null,v);b.config=((e={})=>{const t=j.bind(null,Object.assign({},v,e,{loaders:(e.loaders||[]).concat(v.loaders),urlResolvers:(e.urlResolvers||[]).concat(v.urlResolvers)}));return t.load=t,t});var A=b;exports.default=A,w("load-dynamic-module",b);const M={};async function j(e,...t){return new Promise(n=>{const{baseUrl:o,globals:s,urlResolvers:i,loaders:l}=e,u=[];for(const e of t)if("string"==typeof e){const t=e.match(/(\w+[=])?(([a-z]+)([-]data)?[:!])?([^]+)/i),n=t[1]&&t[1].slice(0,-1),s=/data/i.test(t[3])||t[4],l=s?t[5]:"",a=/https?/i.test(t[3]),d=s?"":a?t[3]+"://"+t[5]:t[5],f=t[3];if(d){const e=i.find(e=>e.t(d,o)).r(d,o),t=M[e];t?u.push(t):function(e){u.push(M[e]=(0,r.http)(e).then(t=>{const r=t.responseURL||e,o=r===e?e:r;return o!==e?(log("URLx-302 was redirected",e,"--\x3e",o),M[o]=M[e]):log("URLx-200 - not redirected",o),{type:f||t.contentType||c(o),data:t.content,globalName:n,actualUrl:o}}).catch(t=>({finalVALUE:new h(`module ${e} failed to download`,t)})))}(e)}else u.push({type:f,data:l,globalName:n})}else u.push({finalVALUE:e});async function p(e,t){return new Promise(async n=>{const o=f(e);if(o.isLoaded)n(o);else if(o.isUnresolved)o.dependsOnMe(()=>n(o));else{o.dependsOnMe(()=>n(o));try{const n={baseUrl:e,globals:s,urlResolvers:i,loaders:l},c=o.genAMDDefine(n),u={define:c.defineMethod,module:void 0,exports:void 0,require(t){throw new Error(`cannot 'require' in AMD module ${e}:\n\ttry 'await requireAsync("${t}"' instead`)},requireAsync:async e=>await j(n,e)},f={},p={define:()=>{throw new Error("unexpected use of DEFINE in commonJS module")},module:{exports:f},exports:f,require:async e=>await j(n,e)};s(u,p);const h=new r.AsyncFunction(...Object.keys(u),t);try{await h(...Object.values(u))}catch(e){c.isAMD&&o.resolved(e)}if(!c.isAMD)if(d(t)){const n=a(t),s=new r.AsyncFunction(...Object.keys(p),n);try{await s(...Object.values(p)),o.resolved((p.module||{}).exports||f)}catch(t){o.resolved(new y(`Failed to load ${e} as CJS module`,t))}}else o.resolved(new y("module seems to be neither AMD/UMD nor CommonJS"))}catch(e){o.resolved(e)}}})}Promise.all(u).then(async e=>{for(const t of e)if(!("finalVALUE"in t))try{const e=l.find(e=>e.t(t.type)).c(t.data);t.finalVALUE=/javascript/i.test(t.type)?(await p(t.actualUrl,e)).module:e,t.globalName&&(window[t.globalName]=t.finalVALUE),Object.keys(t).forEach(e=>!/finalVALUE/.test(e)&&delete t[e])}catch(e){t.finalVALUE=e}try{const t=e.map(e=>e.finalVALUE);n(1===e.length?t[0]:t)}catch(e){n(e)}})})}}])});