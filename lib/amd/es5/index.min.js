define(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),Object.defineProperty(exports,"__esModule",{value:!0}),exports.addKnownModule=l,exports.default=u;var r=require("my-npm-packages/freddy-javascript-utils");const o=e=>e.replace(/\brequire\s*[(]/g,"await require("),i=e=>/module[.]exports/.test(e);function s(e,t){return/^(https?[:])?[\/][\/]/i.test(e)?e:/^[a-z_$]/i.test(e)?`https://unpkg.com/${e}`:t?new URL(e,t).href:e}const a={};class d{static getModule(e){return a[e]||(a[e]=new d({name:e}))}static addModule(e,t){a[e]=new d({name:e,module:t})}constructor({name:e,module:t}={}){this.name=e,this.module=t}get isLoaded(){return this.module||this.err}get isUnresolved(){return!this.isLoaded&&!!this.resolveMe}resolved(e){this.module=e,this.publicizeResolution()}resolvedWithError(e){this.err=e,"SyntaxError"===e.name&&/await.+async.+function/i.test(e.message||"")?console.warn(`${this.name} may be CJS module with nested requires\n\t(nested requires must be inside async functions)`):console.error(`${this.name} module was not loaded`,e),this.publicizeResolution()}publicizeResolution(){this.resolveMe(),delete this.resolveMe,(this.waitingOnMe||[]).forEach(e=>e.resolveDependent()),delete this.waitingOnMe}dependsOnMe(e,t){const n=this.waitingOnMe||(this.waitingOnMe=[]);n.find(t=>t.url===e)?this.resolvedWithError(new Error("CYCLYCAL DEPENDENCY: "+e+"<--\x3e"+this.name)):n.push({url:e,resolveDependent:t})}}function l(e,t,n=s){const r=n(e);d.addModule(r,new d({name:r,module:t}))}async function u(e,{baseUrl:t=window.location.href,globals:n=(()=>{}),urlResolver:a=s}={}){function l(e){const t=document.getElementsByTagName("head")[0];var n=document.createElement("style");n.setAttribute("type","text/css"),n.appendChild(document.createTextNode(e)),t.appendChild(n)}return/noty/.test(e)&&log("noty aa",e),new Promise(async s=>{const c=a(e,t),p=d.getModule(c);if(p.isLoaded)s(p);else if(p.isUnresolved)log(t+" WAITING FOR dependent "+c),p.dependsOnMe(t,()=>s(p));else{p.resolveMe=(()=>s(p));try{const e=await(0,r.http)(c);log("noty",e);const t=e.data;if(/text[\/]css/.test(e.dataType))return l(t),p.resolved(t),void l(".noty_body {\n                        color: white;\n                        background: red;\n                        padding: 20px;\n                        width: 150px;\n                    }");/javascript/.test(e.dataType)||log("WHHOPS, not javascript code???",e.data);const s={baseUrl:c,globals:n,urlResolver:a},d={define:h,module:void 0,exports:void 0,require(e){throw new Error(`cannot 'require' in AMD module ${c}:\n\try 'await requireAsync("${e}"' instead`)},requireAsync:async e=>(await u(e,s)).module},m={},y={define:()=>{throw new Error("unexpected use of DEFINE in commonJS module")},module:{exports:m},exports:m,require:async e=>(await u(e,s)).module};n(d,y);const v=new r.AsyncFunction(...Object.keys(d),t);h.amd={};var f=!1;function h(...e){f=!0;const t=e.pop();if("function"!=typeof t)throw new Error(`expecting 'define' to be a function (was ${typeof t})`);const n=t.length,r=[];for(;r.length<n;){const t=e.pop();if("string"==typeof t)r.unshift(t);else{if(!Array.isArray(t))throw new Error("invalid dependency in AMD module definition - can only be a string or an array of strings");for(;r.length<n&&t.length>0;){const e=t.pop();if("string"!=typeof e)throw new Error(`invalid dependency in AMD module definition - can only be a string (got type=${typeof e})`);r.unshift(e)}}}const o=r.map(e=>u(e,s));Promise.all(o).then(e=>{try{p.resolved(t(...e.map(e=>e.module)))}catch(e){p.resolvedWithError(e)}})}try{await v(...Object.values(d))}catch(e){f&&p.resolvedWithError(e)}if(!f)if(i(t)){const e=o(t),n=new r.AsyncFunction(...Object.keys(y),e);await n(...Object.values(y)),p.resolved((y.module||{}).exports||m)}else p.resolvedWithError(new Error("module seems to be neither AMD/UMD nor CommonJS"))}catch(e){p.resolvedWithError(e)}}})}l("load-dynamic-module",u);const c=(...e)=>log("[LIBX]",...e);!async function(){const e=e=>`https://api.cdnjs.com/${e}`;try{const t=await(0,r.http)((t=>e(`libraries/${t}`))("vue")),n=JSON.parse(t.data);c(n);const o=await(0,r.http)((t=>e(`libraries?search=${t}`))("vue")),i=JSON.parse(o.data).results.find(e=>"vue"===e.name);c(i)}catch(e){log.error("[LIBX]",e)}}()}])});